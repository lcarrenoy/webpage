{"title":"Data Anlyst","markdown":{"yaml":{"title":"Data Anlyst","subtitle":"Python, SQL y R","output":{"html_document":{"toc":true,"toc_float":true,"code_download":true}}},"headingText":"Cargar librerías necesarias","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\n\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(reticulate)\n\n# Crear base de datos SQLite de ejemplo\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n# Crear tablas de ejemplo\ndbExecute(con, \"\nCREATE TABLE ventas_programacion (\n    lenguaje TEXT,\n    usuarios INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO ventas_programacion VALUES \n('Python', 50),\n('R', 20),\n('Node.js', 35),\n('PHP', 47),\n('Java', 42),\n('JavaScript', 55)\n\")\n\ndbExecute(con, \"\nCREATE TABLE empleados_habilidades (\n    habilidad TEXT,\n    cantidad INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO empleados_habilidades VALUES \n('Programación', 76),\n('Ciencia de Datos', 31),\n('Matemáticas', 45),\n('Ingeniería', 57),\n('Diseño', 38),\n('Marketing', 29)\n\")\n\ndbExecute(con, \"\nCREATE TABLE ventas_por_año (\n    año INTEGER,\n    python INTEGER,\n    r INTEGER,\n    javascript INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO ventas_por_año VALUES \n(2020, 45, 15, 40),\n(2021, 50, 20, 45),\n(2022, 55, 22, 50),\n(2023, 60, 25, 55),\n(2024, 65, 28, 60)\n\")\n```\n\n## Introducción\n\nEste documento demuestra cómo crear gráficos de barras utilizando **Python** (Matplotlib), **SQL** para consultas de datos, y **R** (ggplot2) para visualizaciones. Esta aproximación multilenguaje permite aprovechar las fortalezas específicas de cada herramienta.\n\n## Bar Charts - Python (Matplotlib)\n\n### Gráfico Básico de Barras Verticales\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Datos de lenguajes de programación\neje_x = ['Python', 'R', 'Node.js', 'PHP', 'Java', 'JavaScript']\neje_y = [50, 20, 35, 47, 42, 55]\n\nplt.figure(figsize=(12, 7))\ncolors = ['#3776ab', '#276DC3', '#8CC84B', '#777BB4', '#ED8B00', '#F7DF1E']\nbars = plt.bar(eje_x, eje_y, color=colors, alpha=0.8, edgecolor='black', linewidth=1)\n\n# Agregar valores encima de las barras\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n             f'{int(height)}K', ha='center', va='bottom', fontweight='bold')\n\nplt.ylabel('Cantidad de usuarios (miles)', fontsize=12)\nplt.xlabel('Lenguajes de programación', fontsize=12)\nplt.title('Popularidad de Lenguajes de Programación', fontsize=14, fontweight='bold')\nplt.xticks(rotation=45)\nplt.grid(axis='y', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n### Gráfico de Barras Horizontales\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\n\n# Datos de habilidades profesionales\nhabilidades = ['Programación', 'Ciencia de Datos', 'Matemáticas', 'Ingeniería', 'Diseño', 'Marketing']\nempleados = [76, 31, 45, 57, 38, 29]\n\nplt.figure(figsize=(12, 8))\ncolors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']\nbars = plt.barh(habilidades, empleados, color=colors, alpha=0.8, edgecolor='black', linewidth=1)\n\n# Agregar valores al final de las barras\nfor i, bar in enumerate(bars):\n    width = bar.get_width()\n    plt.text(width + 1, bar.get_y() + bar.get_height()/2.,\n             f'{int(width)}', ha='left', va='center', fontweight='bold')\n\nplt.xlabel('Número de empleados', fontsize=12)\nplt.ylabel('Habilidades', fontsize=12)\nplt.title('Distribución de Habilidades en el Equipo', fontsize=14, fontweight='bold')\nplt.grid(axis='x', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n### Gráfico de Barras Agrupadas\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Datos de múltiples series\naños = ['2020', '2021', '2022', '2023', '2024']\npython = [45, 50, 55, 60, 65]\nr = [15, 20, 22, 25, 28]\njavascript = [40, 45, 50, 55, 60]\n\nx = np.arange(len(años))\nwidth = 0.25\n\nplt.figure(figsize=(12, 8))\nbars1 = plt.bar(x - width, python, width, label='Python', color='#3776ab', alpha=0.8)\nbars2 = plt.bar(x, r, width, label='R', color='#276DC3', alpha=0.8)\nbars3 = plt.bar(x + width, javascript, width, label='JavaScript', color='#F7DF1E', alpha=0.8)\n\nplt.xlabel('Años', fontsize=12)\nplt.ylabel('Usuarios (miles)', fontsize=12)\nplt.title('Evolución de Usuarios por Lenguaje (2020-2024)', fontsize=14, fontweight='bold')\nplt.xticks(x, años)\nplt.legend()\nplt.grid(axis='y', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n## SQL - Consultas para Análisis de Datos\n\n### Consulta de Datos de Lenguajes\n\n```{sql connection=con}\nSELECT \n    lenguaje,\n    usuarios,\n    ROUND(usuarios * 100.0 / (SELECT SUM(usuarios) FROM ventas_programacion), 1) as porcentaje_mercado\nFROM ventas_programacion \nORDER BY usuarios DESC;\n```\n\n### Top 3 Lenguajes Más Populares\n\n```{sql connection=con}\nSELECT \n    lenguaje,\n    usuarios,\n    CASE \n        WHEN usuarios >= 50 THEN 'Alta Popularidad'\n        WHEN usuarios >= 35 THEN 'Popularidad Media'\n        ELSE 'Popularidad Baja'\n    END as categoria_popularidad\nFROM ventas_programacion \nORDER BY usuarios DESC \nLIMIT 3;\n```\n\n### Análisis de Habilidades con Estadísticas\n\n```{sql connection=con}\nSELECT \n    habilidad,\n    cantidad,\n    ROUND(AVG(cantidad) OVER(), 1) as promedio_general,\n    ROUND(cantidad - AVG(cantidad) OVER(), 1) as diferencia_promedio,\n    CASE \n        WHEN cantidad > AVG(cantidad) OVER() THEN 'Por encima del promedio'\n        ELSE 'Por debajo del promedio'\n    END as clasificacion\nFROM empleados_habilidades \nORDER BY cantidad DESC;\n```\n\n### Evolución Temporal de Lenguajes\n\n```{sql connection=con}\nSELECT \n    año,\n    python,\n    r,\n    javascript,\n    (python + r + javascript) as total_usuarios,\n    ROUND(python * 100.0 / (python + r + javascript), 1) as porcentaje_python\nFROM ventas_por_año \nORDER BY año;\n```\n\n## Bar Charts - R (ggplot2)\n\n### Gráfico Básico con R\n\n```{r, fig.align='center', fig.width=12, fig.height=7}\n# Obtener datos de SQL\ndatos_lenguajes <- dbGetQuery(con, \"SELECT lenguaje, usuarios FROM ventas_programacion ORDER BY usuarios DESC\")\n\n# Crear gráfico con ggplot2\nggplot(datos_lenguajes, aes(x = reorder(lenguaje, usuarios), y = usuarios, fill = lenguaje)) +\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"black\", size = 0.5) +\n  geom_text(aes(label = paste0(usuarios, \"K\")), hjust = -0.1, fontface = \"bold\") +\n  coord_flip() +\n  labs(title = \"Popularidad de Lenguajes de Programación\",\n       subtitle = \"Datos obtenidos de consulta SQL\",\n       x = \"Lenguajes de Programación\", \n       y = \"Usuarios (miles)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\")) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n### Gráfico de Habilidades\n\n```{r, fig.align='center', fig.width=12, fig.height=8}\n# Obtener datos de habilidades\ndatos_habilidades <- dbGetQuery(con, \"SELECT habilidad, cantidad FROM empleados_habilidades ORDER BY cantidad DESC\")\n\nggplot(datos_habilidades, aes(x = reorder(habilidad, cantidad), y = cantidad, fill = cantidad)) +\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"black\", size = 0.5) +\n  geom_text(aes(label = cantidad), hjust = -0.1, fontface = \"bold\") +\n  coord_flip() +\n  labs(title = \"Distribución de Habilidades en el Equipo\",\n       subtitle = \"Número de empleados por habilidad\",\n       x = \"Habilidades\", \n       y = \"Número de empleados\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\")) +\n  scale_fill_gradient(low = \"#E8F4FD\", high = \"#1E88E5\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n### Gráfico de Evolución Temporal\n\n```{r, fig.align='center', fig.width=12, fig.height=8}\n# Obtener datos temporales\ndatos_tiempo <- dbGetQuery(con, \"SELECT * FROM ventas_por_año ORDER BY año\")\n\n# Transformar datos para ggplot\ndatos_long <- pivot_longer(datos_tiempo, \n                          cols = c(python, r, javascript), \n                          names_to = \"lenguaje\", \n                          values_to = \"usuarios\")\n\n# Crear gráfico\nggplot(datos_long, aes(x = factor(año), y = usuarios, fill = lenguaje)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8, color = \"black\", size = 0.3) +\n  geom_text(aes(label = paste0(usuarios, \"K\")), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5, \n            fontface = \"bold\", \n            size = 3) +\n  labs(title = \"Evolución de Usuarios por Lenguaje (2020-2024)\",\n       subtitle = \"Crecimiento anual de las principales tecnologías\",\n       x = \"Años\", \n       y = \"Usuarios (miles)\",\n       fill = \"Lenguaje\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        legend.title = element_text(size = 12, face = \"bold\"),\n        legend.text = element_text(size = 11)) +\n  scale_fill_manual(values = c(\"python\" = \"#3776ab\", \"r\" = \"#276DC3\", \"javascript\" = \"#F7DF1E\")) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n## Integración SQL + Python\n\nCombinemos una consulta SQL compleja con visualización en Python:\n\n```{r}\n# Ejecutar consulta SQL avanzada\ndatos_analisis <- dbGetQuery(con, \"\nSELECT \n    lenguaje,\n    usuarios,\n    CASE \n        WHEN usuarios >= 50 THEN 'Alto'\n        WHEN usuarios >= 35 THEN 'Medio'\n        ELSE 'Bajo'\n    END as categoria,\n    ROUND(usuarios * 100.0 / (SELECT SUM(usuarios) FROM ventas_programacion), 1) as porcentaje\nFROM ventas_programacion \nWHERE usuarios > 25\nORDER BY usuarios DESC\n\")\n\n# Pasar datos a Python\npy$datos_desde_r <- datos_analisis\n```\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Usar datos de R/SQL\ndf = pd.DataFrame(datos_desde_r)\n\n# Crear subplot con dos gráficos\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Gráfico 1: Barras por usuarios\ncolors = ['#FF6B6B' if cat == 'Alto' else '#4ECDC4' if cat == 'Medio' else '#45B7D1' \n          for cat in df['categoria']]\n\nbars1 = ax1.bar(df['lenguaje'], df['usuarios'], color=colors, alpha=0.8, edgecolor='black')\nax1.set_title('Lenguajes por Número de Usuarios', fontweight='bold')\nax1.set_xlabel('Lenguajes')\nax1.set_ylabel('Usuarios (miles)')\nax1.tick_params(axis='x', rotation=45)\n\n# Agregar valores en las barras\nfor bar in bars1:\n    height = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2., height + 1,\n             f'{int(height)}K', ha='center', va='bottom', fontweight='bold')\n\n# Gráfico 2: Distribución por porcentaje\nwedges, texts, autotexts = ax2.pie(df['porcentaje'], labels=df['lenguaje'], autopct='%1.1f%%',\n                                   colors=colors, startangle=90)\nax2.set_title('Distribución de Mercado', fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n```\n\n## Análisis Comparativo Final\n\n### Resumen de Datos por Categoría\n\n```{sql connection=con}\nSELECT \n    categoria,\n    COUNT(*) as cantidad_lenguajes,\n    AVG(usuarios) as promedio_usuarios,\n    SUM(usuarios) as total_usuarios\nFROM (\n    SELECT \n        lenguaje,\n        usuarios,\n        CASE \n            WHEN usuarios >= 50 THEN 'Alto'\n            WHEN usuarios >= 35 THEN 'Medio'\n            ELSE 'Bajo'\n        END as categoria\n    FROM ventas_programacion\n) \nGROUP BY categoria\nORDER BY total_usuarios DESC;\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\n\n# Cargar librerías necesarias\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(reticulate)\n\n# Crear base de datos SQLite de ejemplo\ncon <- dbConnect(RSQLite::SQLite(), \":memory:\")\n\n# Crear tablas de ejemplo\ndbExecute(con, \"\nCREATE TABLE ventas_programacion (\n    lenguaje TEXT,\n    usuarios INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO ventas_programacion VALUES \n('Python', 50),\n('R', 20),\n('Node.js', 35),\n('PHP', 47),\n('Java', 42),\n('JavaScript', 55)\n\")\n\ndbExecute(con, \"\nCREATE TABLE empleados_habilidades (\n    habilidad TEXT,\n    cantidad INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO empleados_habilidades VALUES \n('Programación', 76),\n('Ciencia de Datos', 31),\n('Matemáticas', 45),\n('Ingeniería', 57),\n('Diseño', 38),\n('Marketing', 29)\n\")\n\ndbExecute(con, \"\nCREATE TABLE ventas_por_año (\n    año INTEGER,\n    python INTEGER,\n    r INTEGER,\n    javascript INTEGER\n)\")\n\ndbExecute(con, \"\nINSERT INTO ventas_por_año VALUES \n(2020, 45, 15, 40),\n(2021, 50, 20, 45),\n(2022, 55, 22, 50),\n(2023, 60, 25, 55),\n(2024, 65, 28, 60)\n\")\n```\n\n## Introducción\n\nEste documento demuestra cómo crear gráficos de barras utilizando **Python** (Matplotlib), **SQL** para consultas de datos, y **R** (ggplot2) para visualizaciones. Esta aproximación multilenguaje permite aprovechar las fortalezas específicas de cada herramienta.\n\n## Bar Charts - Python (Matplotlib)\n\n### Gráfico Básico de Barras Verticales\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Datos de lenguajes de programación\neje_x = ['Python', 'R', 'Node.js', 'PHP', 'Java', 'JavaScript']\neje_y = [50, 20, 35, 47, 42, 55]\n\nplt.figure(figsize=(12, 7))\ncolors = ['#3776ab', '#276DC3', '#8CC84B', '#777BB4', '#ED8B00', '#F7DF1E']\nbars = plt.bar(eje_x, eje_y, color=colors, alpha=0.8, edgecolor='black', linewidth=1)\n\n# Agregar valores encima de las barras\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n             f'{int(height)}K', ha='center', va='bottom', fontweight='bold')\n\nplt.ylabel('Cantidad de usuarios (miles)', fontsize=12)\nplt.xlabel('Lenguajes de programación', fontsize=12)\nplt.title('Popularidad de Lenguajes de Programación', fontsize=14, fontweight='bold')\nplt.xticks(rotation=45)\nplt.grid(axis='y', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n### Gráfico de Barras Horizontales\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\n\n# Datos de habilidades profesionales\nhabilidades = ['Programación', 'Ciencia de Datos', 'Matemáticas', 'Ingeniería', 'Diseño', 'Marketing']\nempleados = [76, 31, 45, 57, 38, 29]\n\nplt.figure(figsize=(12, 8))\ncolors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']\nbars = plt.barh(habilidades, empleados, color=colors, alpha=0.8, edgecolor='black', linewidth=1)\n\n# Agregar valores al final de las barras\nfor i, bar in enumerate(bars):\n    width = bar.get_width()\n    plt.text(width + 1, bar.get_y() + bar.get_height()/2.,\n             f'{int(width)}', ha='left', va='center', fontweight='bold')\n\nplt.xlabel('Número de empleados', fontsize=12)\nplt.ylabel('Habilidades', fontsize=12)\nplt.title('Distribución de Habilidades en el Equipo', fontsize=14, fontweight='bold')\nplt.grid(axis='x', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n### Gráfico de Barras Agrupadas\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Datos de múltiples series\naños = ['2020', '2021', '2022', '2023', '2024']\npython = [45, 50, 55, 60, 65]\nr = [15, 20, 22, 25, 28]\njavascript = [40, 45, 50, 55, 60]\n\nx = np.arange(len(años))\nwidth = 0.25\n\nplt.figure(figsize=(12, 8))\nbars1 = plt.bar(x - width, python, width, label='Python', color='#3776ab', alpha=0.8)\nbars2 = plt.bar(x, r, width, label='R', color='#276DC3', alpha=0.8)\nbars3 = plt.bar(x + width, javascript, width, label='JavaScript', color='#F7DF1E', alpha=0.8)\n\nplt.xlabel('Años', fontsize=12)\nplt.ylabel('Usuarios (miles)', fontsize=12)\nplt.title('Evolución de Usuarios por Lenguaje (2020-2024)', fontsize=14, fontweight='bold')\nplt.xticks(x, años)\nplt.legend()\nplt.grid(axis='y', alpha=0.3)\nplt.tight_layout()\nplt.show()\n```\n\n## SQL - Consultas para Análisis de Datos\n\n### Consulta de Datos de Lenguajes\n\n```{sql connection=con}\nSELECT \n    lenguaje,\n    usuarios,\n    ROUND(usuarios * 100.0 / (SELECT SUM(usuarios) FROM ventas_programacion), 1) as porcentaje_mercado\nFROM ventas_programacion \nORDER BY usuarios DESC;\n```\n\n### Top 3 Lenguajes Más Populares\n\n```{sql connection=con}\nSELECT \n    lenguaje,\n    usuarios,\n    CASE \n        WHEN usuarios >= 50 THEN 'Alta Popularidad'\n        WHEN usuarios >= 35 THEN 'Popularidad Media'\n        ELSE 'Popularidad Baja'\n    END as categoria_popularidad\nFROM ventas_programacion \nORDER BY usuarios DESC \nLIMIT 3;\n```\n\n### Análisis de Habilidades con Estadísticas\n\n```{sql connection=con}\nSELECT \n    habilidad,\n    cantidad,\n    ROUND(AVG(cantidad) OVER(), 1) as promedio_general,\n    ROUND(cantidad - AVG(cantidad) OVER(), 1) as diferencia_promedio,\n    CASE \n        WHEN cantidad > AVG(cantidad) OVER() THEN 'Por encima del promedio'\n        ELSE 'Por debajo del promedio'\n    END as clasificacion\nFROM empleados_habilidades \nORDER BY cantidad DESC;\n```\n\n### Evolución Temporal de Lenguajes\n\n```{sql connection=con}\nSELECT \n    año,\n    python,\n    r,\n    javascript,\n    (python + r + javascript) as total_usuarios,\n    ROUND(python * 100.0 / (python + r + javascript), 1) as porcentaje_python\nFROM ventas_por_año \nORDER BY año;\n```\n\n## Bar Charts - R (ggplot2)\n\n### Gráfico Básico con R\n\n```{r, fig.align='center', fig.width=12, fig.height=7}\n# Obtener datos de SQL\ndatos_lenguajes <- dbGetQuery(con, \"SELECT lenguaje, usuarios FROM ventas_programacion ORDER BY usuarios DESC\")\n\n# Crear gráfico con ggplot2\nggplot(datos_lenguajes, aes(x = reorder(lenguaje, usuarios), y = usuarios, fill = lenguaje)) +\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"black\", size = 0.5) +\n  geom_text(aes(label = paste0(usuarios, \"K\")), hjust = -0.1, fontface = \"bold\") +\n  coord_flip() +\n  labs(title = \"Popularidad de Lenguajes de Programación\",\n       subtitle = \"Datos obtenidos de consulta SQL\",\n       x = \"Lenguajes de Programación\", \n       y = \"Usuarios (miles)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\")) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n### Gráfico de Habilidades\n\n```{r, fig.align='center', fig.width=12, fig.height=8}\n# Obtener datos de habilidades\ndatos_habilidades <- dbGetQuery(con, \"SELECT habilidad, cantidad FROM empleados_habilidades ORDER BY cantidad DESC\")\n\nggplot(datos_habilidades, aes(x = reorder(habilidad, cantidad), y = cantidad, fill = cantidad)) +\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"black\", size = 0.5) +\n  geom_text(aes(label = cantidad), hjust = -0.1, fontface = \"bold\") +\n  coord_flip() +\n  labs(title = \"Distribución de Habilidades en el Equipo\",\n       subtitle = \"Número de empleados por habilidad\",\n       x = \"Habilidades\", \n       y = \"Número de empleados\") +\n  theme_minimal() +\n  theme(legend.position = \"none\",\n        plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\")) +\n  scale_fill_gradient(low = \"#E8F4FD\", high = \"#1E88E5\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n### Gráfico de Evolución Temporal\n\n```{r, fig.align='center', fig.width=12, fig.height=8}\n# Obtener datos temporales\ndatos_tiempo <- dbGetQuery(con, \"SELECT * FROM ventas_por_año ORDER BY año\")\n\n# Transformar datos para ggplot\ndatos_long <- pivot_longer(datos_tiempo, \n                          cols = c(python, r, javascript), \n                          names_to = \"lenguaje\", \n                          values_to = \"usuarios\")\n\n# Crear gráfico\nggplot(datos_long, aes(x = factor(año), y = usuarios, fill = lenguaje)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", alpha = 0.8, color = \"black\", size = 0.3) +\n  geom_text(aes(label = paste0(usuarios, \"K\")), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5, \n            fontface = \"bold\", \n            size = 3) +\n  labs(title = \"Evolución de Usuarios por Lenguaje (2020-2024)\",\n       subtitle = \"Crecimiento anual de las principales tecnologías\",\n       x = \"Años\", \n       y = \"Usuarios (miles)\",\n       fill = \"Lenguaje\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text = element_text(size = 11),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        legend.title = element_text(size = 12, face = \"bold\"),\n        legend.text = element_text(size = 11)) +\n  scale_fill_manual(values = c(\"python\" = \"#3776ab\", \"r\" = \"#276DC3\", \"javascript\" = \"#F7DF1E\")) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))\n```\n\n## Integración SQL + Python\n\nCombinemos una consulta SQL compleja con visualización en Python:\n\n```{r}\n# Ejecutar consulta SQL avanzada\ndatos_analisis <- dbGetQuery(con, \"\nSELECT \n    lenguaje,\n    usuarios,\n    CASE \n        WHEN usuarios >= 50 THEN 'Alto'\n        WHEN usuarios >= 35 THEN 'Medio'\n        ELSE 'Bajo'\n    END as categoria,\n    ROUND(usuarios * 100.0 / (SELECT SUM(usuarios) FROM ventas_programacion), 1) as porcentaje\nFROM ventas_programacion \nWHERE usuarios > 25\nORDER BY usuarios DESC\n\")\n\n# Pasar datos a Python\npy$datos_desde_r <- datos_analisis\n```\n\n```{python, fig.align='center', results='hide', collapse=TRUE}\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Usar datos de R/SQL\ndf = pd.DataFrame(datos_desde_r)\n\n# Crear subplot con dos gráficos\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Gráfico 1: Barras por usuarios\ncolors = ['#FF6B6B' if cat == 'Alto' else '#4ECDC4' if cat == 'Medio' else '#45B7D1' \n          for cat in df['categoria']]\n\nbars1 = ax1.bar(df['lenguaje'], df['usuarios'], color=colors, alpha=0.8, edgecolor='black')\nax1.set_title('Lenguajes por Número de Usuarios', fontweight='bold')\nax1.set_xlabel('Lenguajes')\nax1.set_ylabel('Usuarios (miles)')\nax1.tick_params(axis='x', rotation=45)\n\n# Agregar valores en las barras\nfor bar in bars1:\n    height = bar.get_height()\n    ax1.text(bar.get_x() + bar.get_width()/2., height + 1,\n             f'{int(height)}K', ha='center', va='bottom', fontweight='bold')\n\n# Gráfico 2: Distribución por porcentaje\nwedges, texts, autotexts = ax2.pie(df['porcentaje'], labels=df['lenguaje'], autopct='%1.1f%%',\n                                   colors=colors, startangle=90)\nax2.set_title('Distribución de Mercado', fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n```\n\n## Análisis Comparativo Final\n\n### Resumen de Datos por Categoría\n\n```{sql connection=con}\nSELECT \n    categoria,\n    COUNT(*) as cantidad_lenguajes,\n    AVG(usuarios) as promedio_usuarios,\n    SUM(usuarios) as total_usuarios\nFROM (\n    SELECT \n        lenguaje,\n        usuarios,\n        CASE \n            WHEN usuarios >= 50 THEN 'Alto'\n            WHEN usuarios >= 35 THEN 'Medio'\n            ELSE 'Bajo'\n        END as categoria\n    FROM ventas_programacion\n) \nGROUP BY categoria\nORDER BY total_usuarios DESC;\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"toc":true,"toc_float":true,"code_download":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Data_Analyst.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","theme":{"light":"zephyr","dark":"darkly"},"fontsize":"1.5 rem","mainfont":"arial","monofont":"courier new","code-block-bg":"lightblue","title":"Data Anlyst","subtitle":"Python, SQL y R"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}